
[{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/agents/","section":"Tags","summary":"","title":"Agents","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/categories/ai/","section":"Categories","summary":"","title":"AI","type":"categories"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/azure/","section":"Tags","summary":"","title":"Azure","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/","section":"BeyondElastic","summary":"","title":"BeyondElastic","type":"page"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/foundry/","section":"Tags","summary":"","title":"Foundry","type":"tags"},{"content":" Intro to Semantic Kernel and Multi-Agent AI Apps # In my last post, I have covered Azure AI Agent Service and how it can be used to easily build and run AI agents on Azure. This time, we are going to look at Semantic Kernel as a framework to build, orchestrate and deploy AI agents or multi-agent applications. Semantic Kernel is an open-source development kit by Microsoft that offers a unified framework with a plugin-based architecture for easier integration and reduced complexity. It serves as efficient middleware, enabling fast development of enterprise-grade solutions by combining prompts with existing APIs.\nThe Semantic Kernel SDK is available for C#, Python and Java. More details can be found on the official GitHub repository and the official Microsoft documentation.\nIn this blog post, we are going to combine the Azure AI Agent Service with Semantic Kernel to build a multi-agent AI application with group chat functionality.\nBackground # If you are new to the topic, it can be a bit confusing as there are many options to choose from. Which framework should I use? AutoGen or Semantic Kernel? Which API should I use the Chat Completions API, the Assistants API or the Azure AI Agent Service? Well, famous last words \u0026ldquo;it depends\u0026rdquo; and \u0026ldquo;things are evolving fast\u0026rdquo;.\nThe framework discussion is manly driven by whether you need enterprise-grade support or not. If that is a yes, you should look towards Semantic Kernel. If you are still in the ideation/testing phase, and you need the latest and greatest functionality, take a look at AutoGen. Both teams are working on strategic convergence and integrations between both frameworks, as you can read in the following blog posts:\nMicrosoftâ€™s Agentic AI Frameworks: AutoGen and Semantic Kernel Semantic Kernel Roadmap H1 2025: Accelerating Agents, Processes, and Integration AutoGen and Semantic Kernel, Part 2 In terms of API, the Chat Completions API is lightweight and stateless and can be a good fit for simple tasks. The Assistants API is stateful (managing conversation history) and can be a good fit for more complex scenarios. Azure AI Agent Service delivers all the functionality of the Assistants API plus flexible model choice, out of the box tools, tracing and more.\nRequirements # As an execution engine, we will use the Azure AI Agent Service. We are not going to cover the infrastructure requirements in this blog post. Nevertheless, if you want to get started quickly, simply deploy this bicep template for an standard Azure AI Agent deployment.\nPrepare local dev envrionment # For our local development environment, we need to install the following packages:\npip install python-dotenv azure-identity semantic-kernel[azure] Next, we will use a local .env file to specify some variables to connect to our Azure AI Foundry Project.\nAZURE_AI_AGENT_PROJECT_CONNECTION_STRING=\u0026#34;your_project_connection_string\u0026#34; AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME=\u0026#34;your_model_deployment\u0026#34; Coding # My goal is to create multiple AI agents that act as Basketball coaches. A Head Coach and an Assistant Coach that will exchange ideas and come up with a game plan for a specific game situation.\nFor this blog, we will keep it very simple and don\u0026rsquo;t play too much with plugins or extensions. We just want to create a group chat with specialized agents.\nBuilding the mulit-agent app # As always we need to add some references first. This time we are going to import the asyncio model as we need to execute the main function asynchronously. This allows the program to perform non-blocking operations, such as interacting with Azure AI services, creating agents, and managing the group chat. Additionally, we are going to import some components from the Semantic Kernel library. More about these Semantic Kernel classes can be found later in the text.\n# add references import asyncio from dotenv import load_dotenv from azure.identity.aio import DefaultAzureCredential from semantic_kernel.agents import AzureAIAgent, AzureAIAgentSettings, AgentGroupChat from semantic_kernel.agents.strategies import TerminationStrategy, SequentialSelectionStrategy from semantic_kernel.contents.utils.author_role import AuthorRole Now we are going to load the environment variables from the .env file and define the agent names and instructions as well as the task they should work on.\n# get configuration settings load_dotenv() # agent instructions HEAD_COACH = \u0026#34;HeadCoach\u0026#34; HEAD_COACH_INSTRUCTIONS = \u0026#34;\u0026#34;\u0026#34; You are a Basketball Head Coach that knows everything about offensive plays and strategies. You respond to specific game situations with advice on how to change the game plan. You can ask for more information about the game situation if needed. For offensive plays and strategies, you will decide on the strategy yourself. If the game situation demands a change for defensive plays and strategies, you will ask your Assistant Coach for advice. You will use the advice given by the Assistant Coach regarding defensive adjustments and your own decision for offensive adjustments to create the final game plan. RULES: - Use the instructions provided. - Prepend your response with this text: \u0026#34;head_coach \u0026gt; \u0026#34; - Do not directly answer the question if it is related to defensive strategies. Instead, ask your Assistant Coach for advice. - Do not use the words \u0026#34;final game plan\u0026#34; unless you have created a final game plan according to the instructions. - Add \u0026#34;final game plan\u0026#34; to the end of your response if you have created a final game plan according to the instructions. \u0026#34;\u0026#34;\u0026#34; ASSISTANT_COACH = \u0026#34;AssistantCoach\u0026#34; ASSISTANT_COACH_INSTRUCTIONS = \u0026#34;\u0026#34;\u0026#34; You are a Basketball Assistant Coach that knows defensive plays and strategies. You give advice to your Head Coach for specific game situations that require defensive adjustment. RULES: - Use the instructions provided. - Prepend your response with this text: \u0026#34;assistant_coach \u0026gt; \u0026#34; - You are not allowed to give advice on offensive plays and strategies. - You don\u0026#39;t decide the final game strategy and plan, you only give advice to the Head Coach. - Your advice should be clear and concise and should not include any unnecessary information. \u0026#34;\u0026#34;\u0026#34; # agent task TASK = \u0026#34;Could you please give me advice on how to change the game strategy for the next quarter? We are playing zone defense, and the other team just scored 10 points in a row. We need to change our strategy to stop them. What should we do?\u0026#34; So far, so good. We will now start with our main function. We retrieve the configuration settings with the AzureAIAgentSettings.create method and use the DefaultAzureCredential class to authenticate against our Azure Services, and lastly, we create a client for interacting with the Azure AI agent service.\nasync def main(): ai_agent_settings = AzureAIAgentSettings.create() async with ( DefaultAzureCredential(exclude_environment_credential=True, exclude_managed_identity_credential=True) as creds, AzureAIAgent.create_client(credential=creds) as client, ): The next step is to create our agents on the Azure AI Agent Service and wrap them into Semantic Kernel agents using the AzureAIAgent class.\n# create the head-coach agent on the Azure AI agent service headcoach_agent_definition = await client.agents.create_agent( model=ai_agent_settings.model_deployment_name, name=HEAD_COACH, instructions=HEAD_COACH_INSTRUCTIONS, ) # create a Semantic Kernel agent for the Azure AI head-coach agen agent_headcoach = AzureAIAgent( client=client, definition=headcoach_agent_definition, ) # create the assistant coach agent on the Azure AI agent service assistantcoach_agent_definition = await client.agents.create_agent( model=ai_agent_settings.model_deployment_name, name=ASSISTANT_COACH, instructions=ASSISTANT_COACH_INSTRUCTIONS, ) # create a Semantic Kernel agent for the assistant coach Azure AI agent agent_assistantcoach = AzureAIAgent( client=client, definition=assistantcoach_agent_definition, ) This is where the fun part begins. We are initializing a group chat via the AgentGroupChat class and adding our agents to it. We need to define who comes next and when the group chat should end. To do so, we define a termination and selection strategy. Additionally, we define which agent is contributing to the termination strategy. In our case, only the Head Coach is in charge. Furthermore, we are defining a maximum of 4 iterations until the chat will be terminated.\n# add the agents to a group chat with a custom termination and selection strategy chat = AgentGroupChat( agents=[agent_headcoach, agent_assistantcoach], termination_strategy=ApprovalTerminationStrategy( agents=[agent_headcoach], maximum_iterations=4, automatic_reset=True ), selection_strategy=SelectionStrategy(agents=[agent_headcoach,agent_assistantcoach]), ) In this section, we handle the execution of the group chat, including adding the task, invoking the chat, and performing cleanup operations. The AuthorRole.USER constant is used to explicitly identify the role of the message sender as the user to ensure clarity in the conversation flow.\ntry: # add the task as a message to the group chat await chat.add_chat_message(message=TASK) print(f\u0026#34;# {AuthorRole.USER}: \u0026#39;{TASK}\u0026#39;\u0026#34;) # invoke the chat async for content in chat.invoke(): print(f\u0026#34;# {content.role} - {content.name or \u0026#39;*\u0026#39;}: \u0026#39;{content.content}\u0026#39;\u0026#34;) finally: # cleanup and delete the agents print(\u0026#34;--chat ended--\u0026#34;) await chat.reset() await client.agents.delete_agent(agent_headcoach.id) await client.agents.delete_agent(agent_assistantcoach.id) Almost at the end, we just need to add two classes for the termination and selection function that we have used in the group chat definition. As we defined in the Head Coach agent instructions, as soon as the final game plan is ready, it should add \u0026ldquo;final game plan\u0026rdquo; to its message. We are checking if the last message in the history contains this phrase, and we will terminate the group chat.\n# class of termination strategy class ApprovalTerminationStrategy(TerminationStrategy): \u0026#34;\u0026#34;\u0026#34;A strategy for determining when an agent should terminate.\u0026#34;\u0026#34;\u0026#34; async def should_agent_terminate(self, agent, history): \u0026#34;\u0026#34;\u0026#34;Check if the agent should terminate.\u0026#34;\u0026#34;\u0026#34; return \u0026#34;final game plan\u0026#34; in history[-1].content.lower() The second class adds a selection function that defines which agent should take the next turn in the chat. If the last message comes from the User or the Assistant Coach, it is the Head Coaches turn.\n# class for selection strategy class SelectionStrategy(SequentialSelectionStrategy): \u0026#34;\u0026#34;\u0026#34;A strategy for determining which agent should take the next turn in the chat.\u0026#34;\u0026#34;\u0026#34; # select the next agent that should take the next turn in the chat async def select_agent(self, agents, history): \u0026#34;\u0026#34;\u0026#34;\u0026#34;Check which agent should take the next turn in the chat.\u0026#34;\u0026#34;\u0026#34; # the Head Coach should go after the User or the Assistant Coach if (history[-1].name == ASSISTANT_COACH or history[-1].role == AuthorRole.USER): agent_name = HEAD_COACH return next((agent for agent in agents if agent.name == agent_name), None) # otherwise it is the Assistant Coach\u0026#39;s turn return next((agent for agent in agents if agent.name == ASSISTANT_COACH), None) Lastly, we define the entry point for our app, and that it is executed as an asynchronous coroutine.\nif __name__ == \u0026#34;__main__\u0026#34;: asyncio.run(main()) Running the mulit-agent app # Ok, we should have something to play and test with. The finale code can be found on my GitHub repo here.\nLet\u0026rsquo;s see if we can get a proper game plan from our coaching staff.\nâžœ python app.py # AuthorRole.USER: \u0026#39;Could you please give me advice on how to change the game strategy for the next quarter? We are playing zone defense and the other team just scored 10 points in a row. We need to change our strategy to stop them. What should we do?\u0026#39; # AuthorRole.ASSISTANT - HeadCoach: \u0026#39;head_coach \u0026gt; I\u0026#39;ll need to consult with the Assistant Coach about defensive adjustments since that\u0026#39;s not my area of expertise. Assistant Coach, what adjustments do you recommend for our zone defense to stop the opposing team who has just scored 10 points in a row? In terms of our offensive strategy, we should focus on enhancing our ball movement and executing quick passes to exploit the gaps in their defense. Let\u0026#39;s emphasize perimeter shooting and look for opportunities to drive to the basket, ensuring we spread the floor to create space. Please provide your defensive advice, and I\u0026#39;ll integrate that with our offensive strategy for the necessary adjustments.\u0026#39; # AuthorRole.ASSISTANT - AssistantCoach: \u0026#39;assistant_coach \u0026gt; Consider switching to a man-to-man defense to apply more pressure on their shooters and disrupt their rhythm. This will help limit their easy scoring opportunities and force them into more contested shots. Ensure our players communicate effectively and switch on screens. Additionally, encourage tighter closeouts on shooters to contest their shots and deny open looks. If they continue to score, we could also implement a trap to force turnovers and get out in transition.\u0026#39; # AuthorRole.ASSISTANT - HeadCoach: \u0026#39;head_coach \u0026gt; Thank you, Assistant Coach. Based on your advice, we\u0026#39;ll switch to a man-to-man defense to apply pressure and limit their scoring opportunities. We\u0026#39;ll focus on strong communication and switching on screens, as well as tighter closeouts on shooters. On the offensive side, we\u0026#39;ll continue to enhance our ball movement, emphasizing quick passes and prioritizing perimeter shooting, alongside drive opportunities. This blend of a more aggressive defensive approach and a fluid offensive strategy should help us regain control of the game. Now, let\u0026#39;s put this all together: we\u0026#39;ll implement a man-to-man defense while enhancing our offensive ball movement and exploiting gaps in their defense. final game plan\u0026#39; --chat ended-- Nice! Thanks Coaching staff! That indeed sounds like a plan to win the game in the end.\nIn Azure AI Foundry, we can see that the corresponding Azure AI Agents are getting created during the runtime and cleaned up afterward.\nSummary # This was a very simple example, but it shows how multiple agents can have different expertise and exchange ideas or knowledge about a specific topic via the Semantic Kernel group chat. Additionally, we can facilitate a structured conversation flow that allows the agents to efficiently collaborate and work on user provided tasks. Imagine that these agents would have access to different tools or knowledge sources to make them specialists for a specific task. We already looked at how to add tools (Code Interpreter Tool) to Azure AI Agents in my last blog post. The same approach can be used in combination with Semantic Kernel to make our agents even smarter.\nSources # Semantic Kernel Microsoft documentation Semantic Kernel GitHub repository Microsoftâ€™s Agentic AI Frameworks: AutoGen and Semantic Kernel Semantic Kernel Roadmap H1 2025: Accelerating Agents, Processes, and Integration AutoGen and Semantic Kernel, Part 2 Azure AI Agent standard setup bicep template Intro to Azure AI Agent Service Microsoft Learn AI Agent Fundamentals Semantic Kernel Agents are now Generally Available ","date":"10 April 2025","externalUrl":null,"permalink":"/posts/multi-agent/","section":"Posts","summary":"","title":"Multi Agent","type":"posts"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/multi-agent/","section":"Tags","summary":"","title":"Multi-Agent","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/semantic-kernel/","section":"Tags","summary":"","title":"Semantic Kernel","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Intro to Azure AI Agent Service # AI Agents are in talks, and we are going to take a look at the Azure AI Agent Service. Why should you care? Because AI Agents are the next evolution of AI-driven applications, and they will help you to automate and execute more complicated multistep tasks completely autonomously or with a human in a loop. Here are two blog posts that are worth reading to set the scene:\nAI agents â€” what they are, and how theyâ€™ll change the way we work Introducing Azure AI Agent Service In this blog post, I will give you a short overview about what the Azure AI Agent Service is, what it can do for you, and how to quickly get started via the provided Python Azure AI Foundry SDK.\nNOTE: At the time of writing, the Azure AI Agent Service is in public preview.\nOverview # The Azure Azure AI Agent Service is part of Azure AI Foundry. Azure AI Foundry is a unified AI platform that allows you to manage the whole lifecycle of your AI application. Key features, are:\nRich model catalog (OpenAI, DeepSeek, Cohere, Meta, Mistral\u0026hellip;) Deploy and experiment with different models in playgrounds Seamless Integration to other Azure services such as Azure OpenAI, Azure AI Services, and Azure AI Search Project Management with features for project creation, resource management, and access control Simplified coding experience with unified SDK Build and deploy AI agents with the Azure AI Agent Service and more\u0026hellip; With the Azure AI Agent Service, Developers can easily build extensible AI Agents using out of the box tooling and integrations into Azure services. Some of the highlights are:\nFlexible model selection (not solely OpenAI models) Knowledge tools such as Azure AI Search, Grounding with Bing Search, Microsoft Fabric and file uploads Action tools such as OpenAPI 3.0 specified tools and Code Interpreter, Azure Functions and custom functions Conversation state management (providing consistent context) and more\u0026hellip; Requirements # To start with Azure AI Agent Service, we first need to deploy the necessary Azure Services and create an Azure AI Foundry Hub and Project. Additionally, we will prepare our local development environment.\nPrepare infrastructure # In this blog post, we want to focus on how to use these services from a coding perspective. Hence, we are not going to cover the infrastructure deployment in much detail. However, we will simply use the provided bicep template from the Azure-Samples repository here.\nAfter a successful deployment, we should see the following services in your resource group.\nThe Azure AI Foundry portal can be found under https://ai.azure.com/. We should now have an Azure AI Foundry Hub and Project created for us.\nIf you want to learn more about Azure AI Foundry Hubs and Projects, visit the documentation page here.\nWe can also view the connected resources that have been created as part of the deployment and can be used for the AI agents that we want to build.\nPrepare local dev envrionment # For our local development environment, we need to install the following packages:\npip install python-dotenv azure-ai-projects azure-identity Next, we will use a local .env file to specify some variables to connect to our Azure AI Foundry Project.\nAZURE_AI_AGENT_PROJECT_CONNECTION_STRING=\u0026#34;your_project_connection_string\u0026#34; AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME=\u0026#34;your_model_deployment\u0026#34; Coding # If everything is running we can start coding. My goal is to build an AI Agent that acts as a Basketball Assistant Coach. For those who don\u0026rsquo;t know me, I am a big Basketball fan and combing two things that I love is pure excitement for me.\nBuilding the app # First we need to import the necessary classes from the SDK. In this case we are using the python SDK.\nimport os from dotenv import load_dotenv from azure.identity import DefaultAzureCredential from azure.ai.projects import AIProjectClient from azure.ai.projects.models import CodeInterpreterTool, FilePurpose from pathlib import Path We will then load the variables from the .env file, and create the AIProjectClient and connect to our Azure AI Foundry Project.\n# load environment variables from local .env file load_dotenv() PROJECT_CONNECTION_STRING = os.getenv(\u0026#34;AZURE_AI_AGENT_PROJECT_CONNECTION_STRING\u0026#34;) MODEL_DEPLOYMENT = os.getenv(\u0026#34;AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME\u0026#34;) # create ai project client project = AIProjectClient.from_connection_string( conn_str=PROJECT_CONNECTION_STRING, credential=DefaultAzureCredential() ) with project_client: We want our agent (Assistant Coach) to be able to analyze and interpret certain Basketball statistics. In this case, we are going to upload a csv file with statistics about 3-point shots from the NBA seasons 1996 until 2020. To achieve that, we will make use of the CodeInterpreterTool.\n# upload a file and add it to the client file = project_client.agents.upload_file_and_poll( file_path=\u0026#34;nba3p.csv\u0026#34;, purpose=FilePurpose.AGENTS ) print(f\u0026#34;Uploaded file, file ID: {file.id}\u0026#34;) # create a code interpreter tool instance referencing the uploaded file code_interpreter = CodeInterpreterTool(file_ids=[file.id]) Now we can define the agent with instructions and tools.\n# create an agent agent = project_client.agents.create_agent( model=\u0026#34;gpt-4o-mini\u0026#34;, name=\u0026#34;assistant-coach-agent\u0026#34;, instructions=\u0026#34;You are a Basketball assistant coach that knows everything about the game of Basketball. You give advice about Basketball rules, training, statistics and strategies.\u0026#34;, tools=code_interpreter.definitions, tool_resources=code_interpreter.resources, ) print(f\u0026#34;Using agent: {agent.name}\u0026#34;) Next, we create a thread, which is basically the conversation between the user and the agent. In the message itself, we define the ask or task for our agent.\n# create a thread with message thread = project_client.agents.create_thread() print(f\u0026#34;Thread created: {thread.id}\u0026#34;) message = project_client.agents.create_message( thread_id=thread.id, role=\u0026#34;user\u0026#34;, content=\u0026#34;Could you please create a bar chart for 3Pointers made vs attempts during the NBA seasons 1996 until 2020 and save it as a .png file?\u0026#34;, ) Almost done, we now have to specify the run or activation part in which the agent will perform our task. Additionally, we have to fetch the output in reversed chronological order, providing a clear view of the most recent interactions first.\n# ask the agent to perform work on the thread run = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id) # fetch and print the conversation history including the last message print(\u0026#34;\\nConversation Log:\\n\u0026#34;) messages = project_client.agents.list_messages(thread_id=thread.id) for message_data in reversed(messages.data): last_message_content = message_data.content[-1] print(f\u0026#34;{message_data.role}: {last_message_content.text.value}\\n\u0026#34;) The agent should generate a graph png that we want to look at. Hence, we have to download the file with the following code snippet.\n# fetch any generated files for file_path_annotation in messages.file_path_annotations: project_client.agents.save_file(file_id=file_path_annotation.file_path.file_id, file_name=Path(file_path_annotation.text).name) print(f\u0026#34;File saved as {Path(file_path_annotation.text).name}\u0026#34;) Lastly, we should clean up and delete the agent and the thread.\n# clean up project_client.agents.delete_agent(agent.id) project_client.agents.delete_thread(thread.id) Running the app # Note: The code snippets above should just give you an overview of the Azure AI Agent Service and are not representing a production-grade application. Error handling, logging, config management and reusability are just some things you need to add to your final application code. Nevertheless, you can find the application code and the used files on my GitHub repo here.\nLet\u0026rsquo;s run our code and see the results.\n(.venv) âžœ basketball-ai-agent python main.py Uploaded file, file ID: assistant-J7sVvG3wVZXRkXHwSxELJY Using agent: assistant-coach-agent Thread created: thread_zqMD7857xH4zsKwN6olVvkmx Conversation Log: MessageRole.USER: Could you please create a bar chart for 3Pointers made vs attempts during the NBA seasons 1996 until 2020 and save it as a .png file? MessageRole.AGENT: Let\u0026#39;s start by examining the contents of the uploaded file to understand the data it contains. After that, we can create the bar chart for 3-pointers made versus attempts for the NBA seasons from 1996 to 2020. MessageRole.AGENT: The uploaded data contains the following columns: - **NBASeasons**: The season year. - **3PointersMade**: The number of 3-pointers made. - **3PointersAttempts**: The number of 3-pointers attempted. - **3PointersPercentage**: The percentage of successful 3-point shots. - **3PointersPercentageShareInTotalPoints**: The share of 3-pointers in total points. We\u0026#39;ll create a bar chart comparing the number of 3-pointers made versus the number of 3-pointers attempted for the NBA seasons from 1996 to 2020. Let\u0026#39;s proceed with that. MessageRole.AGENT: Here is the bar chart comparing 3-pointers made versus 3-pointers attempted from the NBA seasons 1996 to 2020. You can download it using the link below: [Download the chart](sandbox:/mnt/data/3_pointers_made_vs_attempts_1996_2020.png) File saved as 3_pointers_made_vs_attempts_1996_2020.png During the execution of our app, we can see the agent and thread getting created in Azure AI Foundry portal.\nAfter the run the agent and the thread will be deleted due to our clean-up code. If you want to keep it for troubleshooting proposes, just comment or remove the clean-up section.\nIn the Agents view we can also see the Code Interpreter got added as action tool for our agent, and we can see the file we have uploaded.\nLet\u0026rsquo;s check the results. The graph generated is correct and shows quite a raise in 3 Pointers made and attempts. Thanks Steph Curry.\nSummary # The Azure AI Agent Service allows you to quickly and with less effort build, deploy and manage AI Agents. The comprehensive out of the box toolkit and the possibility to select different models give Developers the flexibility they need to develop agent-based AI apps that can successfully accomplish complex tasks.\nThe Azure AI Agent Service can also easily be used with multi-agent frameworks such as Semantic Kernel. Stay tuned for another blog post about multi-agent apps.\nResources # AI agents â€” what they are, and how theyâ€™ll change the way we work Introducing Azure AI Agent Service What is Azure AI Agent Service Azure AI Agent standard deployment via bicep template from Azure AI Samples repository Azure AI Agent Code Interpreter What is Azure AI Foundry Azure AI Foundry SDK Azure AI Foundry Hubs and Projects ","date":"2 April 2025","externalUrl":null,"permalink":"/posts/agent/","section":"Posts","summary":"","title":"Azure AI Agent Service","type":"posts"},{"content":"Please be aware that all content posted on this website represents only my personal opinion and is based on my experience â€“ it does not represent Microsoft\u0026rsquo;s positions, strategies, or opinions.\n","date":"30 January 2025","externalUrl":null,"permalink":"/disclaimer/","section":"BeyondElastic","summary":"","title":"Disclaimer","type":"page"},{"content":"","date":"30 January 2025","externalUrl":null,"permalink":"/tags/intro/","section":"Tags","summary":"","title":"Intro","type":"tags"},{"content":"Hi everyone,\nWelcome to my blog! ðŸŽ‰ Here, I dive into the exciting world of modern application development, platform challenges, and cloud solutions. As a Technical Specialist, I\u0026rsquo;m thrilled to explore the latest trends and technologies that are shaping our industry.\nIn this space, I\u0026rsquo;ll share insights on how we can tackle today\u0026rsquo;s IT challenges using the powerful capabilities of Microsoft Azure. From cloud computing to AI-driven solutions, DevOps, and everything in between, join me on this journey to discover innovative solutions that drive efficiency and success.\nFor those who have followed my previous blog, beyondelastic.com, thank you for your continued support! I can\u0026rsquo;t wait to bring you even more valuable and fun content here. This is my first post on my new blog, and I\u0026rsquo;m excited to embark on this adventure with you all.\nStay tuned for exciting posts, and don\u0026rsquo;t hesitate to engage with your thoughts and questions!\nBest regards,\nAlex\n","date":"30 January 2025","externalUrl":null,"permalink":"/posts/intro-post/","section":"Posts","summary":"","title":"Intro Post","type":"posts"},{"content":" Welcome to my blog! My name is Alexander Ullah, and I am a proficient, hands-on, and customer-oriented technologist with 20+ years of experience and a passion for Kubernetes and cloud-native technologies, modern apps, and AI. As part of Microsoft\u0026rsquo;s Digital \u0026amp; Application Innovation team, I support our valued customers with their transformation from legacy to modern application platforms to achieve better business outcomes. In addition, I create content and speak at public conferences to inform the community about emerging technologies and the Microsoft Azure portfolio.\nYou can also find me on LinkedIn.\nPlease be aware that all posts and opinions are my own, see Disclaimer\n","date":"30 January 2025","externalUrl":null,"permalink":"/author/","section":"BeyondElastic","summary":"","title":"Author","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]