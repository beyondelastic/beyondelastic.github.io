
[{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/","section":"BeyondElastic","summary":"","title":"BeyondElastic","type":"page"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/tags/agents/","section":"Tags","summary":"","title":"Agents","type":"tags"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/categories/ai/","section":"Categories","summary":"","title":"AI","type":"categories"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/tags/azure/","section":"Tags","summary":"","title":"Azure","type":"tags"},{"content":" Intro to Azure AI Agent Service # AI Agents are in talks, and we are going to take a look at the Azure AI Agent Service. Why should you care? Because AI Agents are the next evolution of AI-driven applications, and they will help you to automate and execute more complicated multistep tasks completely autonomously or with a human in a loop. Here are two blog posts that are worth reading to set the scene:\nAI agents — what they are, and how they’ll change the way we work Introducing Azure AI Agent Service In this blog post, I will give you a short overview about what the Azure AI Agent Service is, what it can do for you, and how to quickly get started via the provided Python Azure AI Foundry SDK.\nNOTE: At the time of writing, the Azure AI Agent Service is in public preview.\nOverview # The Azure Azure AI Agent Service is part of Azure AI Foundry. Azure AI Foundry is a unified AI platform that allows you to manage the whole lifecycle of your AI application. Key features, are:\nRich model catalog (OpenAI, DeepSeek, Cohere, Meta, Mistral\u0026hellip;) Deploy and experiment with different models in playgrounds Seamless Integration to other Azure services such as Azure OpenAI, Azure AI Services, and Azure AI Search Project Management with features for project creation, resource management, and access control Simplified coding experience with unified SDK Build and deploy AI agents with the Azure AI Agent Service and more\u0026hellip; With the Azure AI Agent Service, Developers can easily build extensible AI Agents using out of the box tooling and integrations into Azure services. Some of the highlights are:\nFlexible model selection (not solely OpenAI models) Knowledge tools such as Azure AI Search, Grounding with Bing Search, Microsoft Fabric and file uploads Action tools such as OpenAPI 3.0 specified tools and Code Interpreter, Azure Functions and custom functions Conversation state management (providing consistent context) and more\u0026hellip; Requirements # To start with Azure AI Agent Service, we first need to deploy the necessary Azure Services and create an Azure AI Foundry Hub and Project. Additionally, we will prepare our local development environment.\nPrepare infrastructure # In this blog post, we want to focus on how to use these services from a coding perspective. Hence, we are not going to cover the infrastructure deployment in much detail. However, we will simply use the provided bicep template from the Azure-Samples repository here.\nAfter a successful deployment, we should see the following services in your resource group.\nThe Azure AI Foundry portal can be found under https://ai.azure.com/. We should now have an Azure AI Foundry Hub and Project created for us.\nIf you want to learn more about Azure AI Foundry Hubs and Projects, visit the documentation page here.\nWe can also view the connected resources that have been created as part of the deployment and can be used for the AI agents that we want to build.\nPrepare local dev envrionment # For our local development environment, we need to install the following packages:\npip install python-dotenv azure-ai-projects azure-identity Next, we will use a local .env file to specify some variables to connect to our Azure AI Foundry Project.\nAZURE_AI_AGENT_PROJECT_CONNECTION_STRING=\u0026#34;your_project_connection_string\u0026#34; AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME=\u0026#34;your_model_deployment\u0026#34; Coding # If everything is running we can start coding. My goal is to build an AI Agent that acts as a Basketball Assistant Coach. For those who don\u0026rsquo;t know me, I am a big Basketball fan and combing two things that I love is pure excitement for me.\nBuilding the app # First we need to import the necessary classes from the SDK. In this case we are using the python SDK.\nimport os from dotenv import load_dotenv from azure.identity import DefaultAzureCredential from azure.ai.projects import AIProjectClient from azure.ai.projects.models import CodeInterpreterTool, FilePurpose from pathlib import Path We will then load the variables from the .env file, and create the AIProjectClient and connect to our Azure AI Foundry Project.\n# load environment variables from local .env file load_dotenv() PROJECT_CONNECTION_STRING = os.getenv(\u0026#34;AZURE_AI_AGENT_PROJECT_CONNECTION_STRING\u0026#34;) MODEL_DEPLOYMENT = os.getenv(\u0026#34;AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME\u0026#34;) # create ai project client project = AIProjectClient.from_connection_string( conn_str=PROJECT_CONNECTION_STRING, credential=DefaultAzureCredential() ) with project_client: We want our agent (Assistant Coach) to be able to analyze and interpret certain Basketball statistics. In this case, we are going to upload a csv file with statistics about 3-point shots from the NBA seasons 1996 until 2020. To achieve that, we will make use of the CodeInterpreterTool.\n# upload a file and add it to the client file = project_client.agents.upload_file_and_poll( file_path=\u0026#34;nba3p.csv\u0026#34;, purpose=FilePurpose.AGENTS ) print(f\u0026#34;Uploaded file, file ID: {file.id}\u0026#34;) # create a code interpreter tool instance referencing the uploaded file code_interpreter = CodeInterpreterTool(file_ids=[file.id]) Now we can define the agent with instructions and tools.\n# create an agent agent = project_client.agents.create_agent( model=\u0026#34;gpt-4o-mini\u0026#34;, name=\u0026#34;assistant-coach-agent\u0026#34;, instructions=\u0026#34;You are a Basketball assistant coach that knows everything about the game of Basketball. You give advice about Basketball rules, training, statistics and strategies.\u0026#34;, tools=code_interpreter.definitions, tool_resources=code_interpreter.resources, ) print(f\u0026#34;Using agent: {agent.name}\u0026#34;) Next, we create a thread, which is basically the conversation between the user and the agent. In the message itself, we define the ask or task for our agent.\n# create a thread with message thread = project_client.agents.create_thread() print(f\u0026#34;Thread created: {thread.id}\u0026#34;) message = project_client.agents.create_message( thread_id=thread.id, role=\u0026#34;user\u0026#34;, content=\u0026#34;Could you please create a bar chart for 3Pointers made vs attempts during the NBA seasons 1996 until 2020 and save it as a .png file?\u0026#34;, ) Almost done, we now have to specify the run or activation part in which the agent will perform our task. Additionally, we have to fetch the output in reversed chronological order, providing a clear view of the most recent interactions first.\n# ask the agent to perform work on the thread run = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id) # fetch and print the conversation history including the last message print(\u0026#34;\\nConversation Log:\\n\u0026#34;) messages = project_client.agents.list_messages(thread_id=thread.id) for message_data in reversed(messages.data): last_message_content = message_data.content[-1] print(f\u0026#34;{message_data.role}: {last_message_content.text.value}\\n\u0026#34;) The agent should generate a graph png that we want to look at. Hence, we have to download the file with the following code snippet.\n# fetch any generated files for file_path_annotation in messages.file_path_annotations: project_client.agents.save_file(file_id=file_path_annotation.file_path.file_id, file_name=Path(file_path_annotation.text).name) print(f\u0026#34;File saved as {Path(file_path_annotation.text).name}\u0026#34;) Lastly, we should clean up and delete the agent and the thread.\n# clean up project_client.agents.delete_agent(agent.id) project_client.agents.delete_thread(thread.id) Running the app # Note: The code snippets above should just give you an overview of the Azure AI Agent Service and are not representing a production-grade application. Error handling, logging, config management and reusability are just some things you need to add to your final application code. Nevertheless, you can find the application code and the used files on my GitHub repo here.\nLet\u0026rsquo;s run our code and see the results.\n(.venv) ➜ basketball-ai-agent python main.py Uploaded file, file ID: assistant-J7sVvG3wVZXRkXHwSxELJY Using agent: assistant-coach-agent Thread created: thread_zqMD7857xH4zsKwN6olVvkmx Conversation Log: MessageRole.USER: Could you please create a bar chart for 3Pointers made vs attempts during the NBA seasons 1996 until 2020 and save it as a .png file? MessageRole.AGENT: Let\u0026#39;s start by examining the contents of the uploaded file to understand the data it contains. After that, we can create the bar chart for 3-pointers made versus attempts for the NBA seasons from 1996 to 2020. MessageRole.AGENT: The uploaded data contains the following columns: - **NBASeasons**: The season year. - **3PointersMade**: The number of 3-pointers made. - **3PointersAttempts**: The number of 3-pointers attempted. - **3PointersPercentage**: The percentage of successful 3-point shots. - **3PointersPercentageShareInTotalPoints**: The share of 3-pointers in total points. We\u0026#39;ll create a bar chart comparing the number of 3-pointers made versus the number of 3-pointers attempted for the NBA seasons from 1996 to 2020. Let\u0026#39;s proceed with that. MessageRole.AGENT: Here is the bar chart comparing 3-pointers made versus 3-pointers attempted from the NBA seasons 1996 to 2020. You can download it using the link below: [Download the chart](sandbox:/mnt/data/3_pointers_made_vs_attempts_1996_2020.png) File saved as 3_pointers_made_vs_attempts_1996_2020.png During the execution of our app, we can see the agent and thread getting created in Azure AI Foundry portal.\nAfter the run the agent and the thread will be deleted due to our clean-up code. If you want to keep it for troubleshooting proposes, just comment or remove the clean-up section.\nIn the Agents view we can also see the Code Interpreter got added as action tool for our agent, and we can see the file we have uploaded.\nLet\u0026rsquo;s check the results. The graph generated is correct and shows quite a raise in 3 Pointers made and attempts. Thanks Steph Curry.\nSummary # The Azure AI Agent Service allows you to quickly and with less effort build, deploy and manage AI Agents. The comprehensive out of the box toolkit and the possibility to select different models give Developers the flexibility they need to develop agent-based AI apps that can successfully accomplish complex tasks.\nThe Azure AI Agent Service can also easily be used with multi-agent frameworks such as Semantic Kernel. Stay tuned for another blog post about multi-agent apps.\nResources # AI agents — what they are, and how they’ll change the way we work Introducing Azure AI Agent Service What is Azure AI Agent Service Azure AI Agent standard deployment via bicep template from Azure AI Samples repository Azure AI Agent Code Interpreter What is Azure AI Foundry Azure AI Foundry SDK Azure AI Foundry Hubs and Projects ","date":"2 April 2025","externalUrl":null,"permalink":"/posts/agent/","section":"Posts","summary":"","title":"Azure AI Agent Service","type":"posts"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/tags/foundry/","section":"Tags","summary":"","title":"Foundry","type":"tags"},{"content":"","date":"2 April 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Please be aware that all content posted on this website represents only my personal opinion and is based on my experience – it does not represent Microsoft\u0026rsquo;s positions, strategies, or opinions.\n","date":"30 January 2025","externalUrl":null,"permalink":"/disclaimer/","section":"BeyondElastic","summary":"","title":"Disclaimer","type":"page"},{"content":"","date":"30 January 2025","externalUrl":null,"permalink":"/tags/intro/","section":"Tags","summary":"","title":"Intro","type":"tags"},{"content":"Hi everyone,\nWelcome to my blog! 🎉 Here, I dive into the exciting world of modern application development, platform challenges, and cloud solutions. As a Technical Specialist, I\u0026rsquo;m thrilled to explore the latest trends and technologies that are shaping our industry.\nIn this space, I\u0026rsquo;ll share insights on how we can tackle today\u0026rsquo;s IT challenges using the powerful capabilities of Microsoft Azure. From cloud computing to AI-driven solutions, DevOps, and everything in between, join me on this journey to discover innovative solutions that drive efficiency and success.\nFor those who have followed my previous blog, beyondelastic.com, thank you for your continued support! I can\u0026rsquo;t wait to bring you even more valuable and fun content here. This is my first post on my new blog, and I\u0026rsquo;m excited to embark on this adventure with you all.\nStay tuned for exciting posts, and don\u0026rsquo;t hesitate to engage with your thoughts and questions!\nBest regards,\nAlex\n","date":"30 January 2025","externalUrl":null,"permalink":"/posts/intro-post/","section":"Posts","summary":"","title":"Intro Post","type":"posts"},{"content":" Welcome to my blog! My name is Alexander Ullah, and I am a proficient, hands-on, and customer-oriented technologist with 20+ years of experience and a passion for Kubernetes and cloud-native technologies, modern apps, and AI. As part of Microsoft\u0026rsquo;s Digital \u0026amp; Application Innovation team, I support our valued customers with their transformation from legacy to modern application platforms to achieve better business outcomes. In addition, I create content and speak at public conferences to inform the community about emerging technologies and the Microsoft Azure portfolio.\nYou can also find me on LinkedIn.\nPlease be aware that all posts and opinions are my own, see Disclaimer\n","date":"30 January 2025","externalUrl":null,"permalink":"/author/","section":"BeyondElastic","summary":"","title":"Author","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]